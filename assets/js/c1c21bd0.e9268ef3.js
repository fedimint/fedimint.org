"use strict";(self.webpackChunkwiki_fedimint=self.webpackChunkwiki_fedimint||[]).push([[250],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return n?i.createElement(h,o(o({ref:t},u),{},{components:n})):i.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2587:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:2},o="Fedimint Architecture",s={unversionedId:"MiniMintDetails/Architecture",id:"MiniMintDetails/Architecture",title:"Fedimint Architecture",description:"Fedimint is a highly experimental Rust implementation of a federated chaumian mint on top of Bitcoin. If you are interested in taking a look feel free to reach out.",source:"@site/docs/MiniMintDetails/Architecture.md",sourceDirName:"MiniMintDetails",slug:"/MiniMintDetails/Architecture",permalink:"/docs/MiniMintDetails/Architecture",draft:!1,editUrl:"https://github.com/fedimint/wiki_fedimint/tree/main/docs/MiniMintDetails/Architecture.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Fedimint",permalink:"/docs/MiniMintDetails/MinimintDemo"},next:{title:"Fedimint Consensus",permalink:"/docs/MiniMintDetails/Consensus"}},l={},c=[{value:"The Main Loop",id:"the-main-loop",level:2},{value:"Modules",id:"modules",level:2},{value:"Client Interaction",id:"client-interaction",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,i.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"fedimint-architecture"},"Fedimint Architecture"),(0,a.kt)("p",null,"Fedimint is a highly experimental Rust implementation of a federated chaumian mint on top of Bitcoin. If you are interested in taking a look feel free to ",(0,a.kt)("a",{parentName:"p",href:"mailto:elsirion@protonmail.com"},"reach out"),"."),(0,a.kt)("p",null,"In the following we will try to illuminate the high level architecture. Since this is probably not the only way to build such a federated mint we will only talk about Fedimint in particular here. Other projects like SCRIT made other design decisions that are not reflected. Maybe a more comprehensive comparison can be written at a later date."),(0,a.kt)("p",null,"Fedimint started out as a federated chaumian e-cash prototype. By now it is a more general framework for federated financial applications. At its core is lies the ability to agree on and process transactions. The possible input and output types of these transactions are defined by modules."),(0,a.kt)("p",null,"To implement the federated e-cash functionality there currently exist two modules:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Fediwallet: a federated on-chain wallet, supporting deposits and withdrawals"),(0,a.kt)("li",{parentName:"ul"},"Fedimint: a federated e-cash mint, supporting issuance and spending of blind signed notes of different denominations")),(0,a.kt)("p",null,"In the future other modules, e.g. to integrate Lightning, smart contracts or even a federated market place could be implemented."),(0,a.kt)("h2",{id:"the-main-loop"},"The Main Loop"),(0,a.kt)("p",null,"The main functionality is implemented in one big loop shown below."),(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("p",null,(0,a.kt)("img",{src:n(5102).Z,width:"651",height:"787"}))),(0,a.kt)("p",null,"A BFT consensus algorithm is used to agree on a set of consensus items. These consist of transactions submitted by clients and other data proposed by modules. This globally agreed-upon set is then split into module-specific items and transactions. Module specific items are given to the respective modules first to prepare them for the consensus round."),(0,a.kt)("p",null,"After that the transactions are processed by checking that the sum of input amounts is greater or equalt to outputs plus fees. If that is the case the inputs and outputs are delegated to their respective module for processing. If any is deemed invalid by a module (e.g. invalid signature) the transaction is discarded."),(0,a.kt)("p",null,"After all transactions have been processed the next consensus proposal is prepared. It consists of transactions submitted by clients and module specific items."),(0,a.kt)("h2",{id:"modules"},"Modules"),(0,a.kt)("p",null,"Each module defines an input, output and consensus item type. Modules also keep their own state using the same key-value store as Fedimint. See the database documentation for more information."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Module"),(0,a.kt)("th",{parentName:"tr",align:null},"Input"),(0,a.kt)("th",{parentName:"tr",align:null},"Output"),(0,a.kt)("th",{parentName:"tr",align:null},"Consensus Items"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"FediWallet"),(0,a.kt)("td",{parentName:"tr",align:null},"Deposit"),(0,a.kt)("td",{parentName:"tr",align:null},"Withdrawal"),(0,a.kt)("td",{parentName:"tr",align:null},"- Block height, fees and randomness beacon ",(0,a.kt)("br",null),"- Signatures for withdrawal transactions")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"FediMint"),(0,a.kt)("td",{parentName:"tr",align:null},"Coin spend"),(0,a.kt)("td",{parentName:"tr",align:null},"Coin issuance"),(0,a.kt)("td",{parentName:"tr",align:null},"- Partial blind signatures of issued coins")))),(0,a.kt)("h2",{id:"client-interaction"},"Client Interaction"),(0,a.kt)("p",null,"Clients communicate with federation members via a REST API. They are expected to communicate with as many members as necessary for the required assurances since some might be malicious."),(0,a.kt)("p",null,"Communication is asynchronous. First clients submit a transaction. After that they can query the transaction\u2019s status. If the transaction is found to be faulty the status will be error and the transaction will not be submitted to the consensus."),(0,a.kt)("p",null,"Once a transaction was included in a consensus round its state changes from ",(0,a.kt)("strong",{parentName:"p"},"proposed")," to ",(0,a.kt)("strong",{parentName:"p"},"accepted")," or ",(0,a.kt)("strong",{parentName:"p"},"error")," in case there was a previously undetected problem (e.g. quick double spend)."),(0,a.kt)("p",null,"Note that the accepted state is not final. Depending on the module outputs may need further action, e.g. generating blind signatures or actually submitting a withdrawal transaction. These will show up in the status as they become available."))}p.isMDXComponent=!0},5102:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/architecture-52847c65bc58e7192f8c527866c23359.svg"}}]);